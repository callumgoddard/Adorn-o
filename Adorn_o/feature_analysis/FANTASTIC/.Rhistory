ref<-rep(1,5)
apply(mydata,1,function(x)sqrt(sum((x-ref)^2)))
mydata<-as.data.frame(matrix(c(1,1,1,1,0,1,1,1,1,0),nrow=2))
ref<-rep(1,5)
apply(mydata,1,function(x)sqrt(sum((x-ref)^2)))
View(mydata)
database <- read.csv("~/repos/virtuobass/virtuobass/database/database.csv", stringsAsFactors=FALSE)
View(database)
measure <- read.csv("~/repos/virtuobass/virtuobass/measure.csv")
View(measure)
measure[1]
measure[,1]
measure[1,]
measure[1,] - measure[2,]
measure[1,2:] - measure[2,2:]
measure[1,2] - measure[2,2]
measure[1,c(2:)] - measure[2,c(2:)]
measure[1,c(-1)] - measure[2,c(-1)]
sum(measure[1,c(-1)] - measure[2,c(-1)])
View(database)
View(measure)
ztransform <- function(df) {
for(i in 1:length(colnames(df))){
if(class(df[,i])=="integer"||class(df[,i])=="numeric") {
df[,i] <- (df[,i]-mean(df[,i],na.rm=TRUE)) /  (sqrt(var(df[,i],na.rm=TRUE))+0.0000001)
}
else{df[,i] <- df[,i]}
}
df
}
measure[1,] / lenght(measure)
measure[1,] / length(measure)
measure[1,c(-1)] / length(measure)
measure <- read.csv("~/repos/virtuobass/virtuobass/measure.csv")
View(measure)
measure[1,c(-1)] / length(measure)
sqrt(sum((measure[2,c(-1)-measure(1,c(-1))^2))
sqrt(sum((measure[2,c(-1)-measure[1,c(-1)])^2))
sqrt(sum((measure[2,c(-1)]-measure[1,c(-1)])^2))
measure <- read.csv("~/repos/virtuobass/virtuobass/measure.csv", na.strings="0")
View(measure)
sqrt(sum((measure[2,c(-1)-measure[1,c(-1)])^2))
sqrt(sum((measure[2,c(-1)]-measure[1,c(-1)])^2))
rbind(measure[1,], measure[2,])
dist(rbind(measure[1,], measure[2,]))
exp(-dist(rbind(measure[1,], measure[2,])))
exp(-dist(rbind(measure[1,], measure[2,])/length(measure[2,c(-1)])))
exp(-dist(rbind(measure[1,c(-1)], measure[2,c(-1)])/length(measure[2,c(-1)])))
rbind(measure[1,c(-1)], measure[2,c(-1)])/length(measure[2,c(-1)])
z.transform(measure)
ztransform <- function(df) {
for(i in 1:length(colnames(df))){
if(class(df[,i])=="integer"||class(df[,i])=="numeric") {
df[,i] <- (df[,i]-mean(df[,i],na.rm=TRUE)) /  (sqrt(var(df[,i],na.rm=TRUE))+0.0000001)
}
else{df[,i] <- df[,i]}
}
df
}
z.transform(measure)
ztransform(measure)
measure<-ztransform(measure)
View(measure)
colnames(measure)
features <-colnames(measure)
features<-features[c(-1)]
features
exp(-dist(rbind(measure[1,c(-1)], measure[2,c(-1)]))/length(features))}
exp(-dist(rbind(measure[1,c(-1)], measure[2,c(-1)]))/length(features))
measure[c(-1),]
apply(measure[c(-1),], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
apply(measure[c(2:5),], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim <- apply(measure[c(2:5),], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim[1]
type(sim[1])
sim[1]
sim[1] * 2
sim[1,1] * 2
colnames(sim)
data.frame(sim)
sim <- apply(measure[c(2:5),], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim <- apply(measure[c(2:5),], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
warnings()
sim
max(sim)
sim <- apply(measure[c(-2:5),], 1, function(x)exp(-dist(rbind(x, measure[1,]))/length(features)))
sim <- apply(measure[c(-1),], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim <- apply(measure[c(2:5),], 1, function(x)exp(-dist(rbind(x, measure[1,]))/length(features)))
sim
sim <- apply(measure[c(2:5),c(-1)], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim
sim <- apply(measure[c(2:5),], 1, function(x)exp(-dist(rbind(x, measure[1,]))/length(features)))
sim <- apply(measure[c(2:5),], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim
sim <- apply(measure[c(2:5),c(-1)], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim <- apply(measure[c(2:5),c(-1)], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim
rbind(x, measure[1,c(-1)])
rbind(measure[2,], measure[1,c(-1)])
rbind(measure[2,], measure[1,])
View(measure)
measure$file.id
sim <- apply(measure[c(2:5),c(-1)], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim <- apply(measure[c(2:),c(-1)], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim <- apply(measure[c(-1),c(-1)], 1, function(x)exp(-dist(rbind(x, measure[1,c(-1)]))/length(features)))
sim > 0.5
sim > 0.8
sim =1
colnames(measure[,c(-1)])
measure$file.id
new.df <- measure[c(-1),c(-1)]
rows <- measure$file.id
features<-colnames(measure[,c(-1)])
new.df <- measure[c(-1),c(-1)]
rownames(new.df)<- rows
colnames(new.df) <-features
measure$file.id[2:]
measure$file.id(2:)
measure$file.id
measure$file.id[1]
measure$file.id[c(-1)]
measure$file.id
rows <- measure$file.id[c(-1)]
features<-colnames(measure[,c(-1)])
new.df <- measure[c(-1),c(-1)]
rownames(new.df)<- rows
colnames(new.df) <-features
measure$file.id[c(-1)]
measure[1,]
measure.df <- measure[1,c(-1)]
measure.df
measure[1,1]
rows <- measure$file.id[c(-1)]
features<-colnames(measure[,c(-1)])
database.df <- measure[c(-1),c(-1)]
rownames(database.df) <- rows
colnames(database.df) <-features
measure.df <- measure[1,c(-1)]
rownames(measure.df) <-  measure[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim
colnames(sim)
dataframe(sim)
data.frame(sim)
sim.df <- data.frame(sim)
min(sim)
min(sim.df$sim)
max(sim.df$sim)
sim.df$sim[sim.df$sim > 0.7]
sim.df[sim.df$sim > 0.7]
sim.df[sim.df$sim > 0.7,]
sim.df[,sim.df$sim > 0.7]
sim.df[sim.df$sim > 0.7,]
sim.df[sim.df$sim = 0.7,]
sim.df[sim.df$sim == 0.7,]
sim.df$sim > 0.7
import(dplyr)
load(dplyr)
sim.df[[sim.df$sim == 0.7,]]
sim.df[[sim.df$sim == 0.7]]
sim.df$sim[[sim.df$sim == 0.7]]
sim.df$sim[[sim.df$sim == 0.7,]]
which(sim.df > 0.8)
sim.df[which(sim.df > 0.8)]
sim.df$sim[which(sim.df > 0.8)]
library(dplyr)
filter(sim.df$sim, >0.7)
sim.df$file.id <- rownames(sim.df)
sim.df$file.id[which(sim.df > 0.8)]
sim.df
sim.df$file.id[which(sim.df$sim > 0.8)]
max(sim.df$sim)
max(sim.df$sim)/100
max(sim.df$sim)/100*10
max(sim.df$sim)-max(sim.df$sim)/100*10
sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-max(sim.df$sim)/100*10)]
sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-max(sim.df$sim)/100*1)]
percent.match <- 1
sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-max(sim.df$sim)/100*percent.match)]
max(sim.df$sim)-max(sim.df$sim)/100*10
measure[1,]
measure[1,features]
get.candidate.set <- function(measure, database, percent.match=1){
# get the features from the measure
features<-colnames(measure[,c(-1)])
rows <- database$file.id
database.df <- database[,features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure[1,features]
rownames(measure.df) <-  measure[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-max(sim.df$sim)/100*percent.match)]
}
get.candidate.set(measure[1,], measure[c(-1),], 2)
measure.database.df$file.id[c(-1)]
measure$file.id[c(-1)]
measure$file.id
get.candidate.set(measure)
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-max(sim.df$sim)/100*percent.match)]
}
get.candidate.set(measure)
out<- get.candidate.set(measure)
out
View(measure)
list(out)
View(measure, TRUE, 0)
out<- get.candidate.set(measure, TRUE, 0)
out
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]
}
out<- get.candidate.set(measure, TRUE, 0)
out
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
if(percent.match == 0){
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)]}
else{
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]}
list(out)
}
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
if(percent.match == 0){
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)]}
else{
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]}
list(out)
}
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
if(percent.match == 0){
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)]}
else{
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]}
out
}
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
if(percent.match == 0){
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim))]}
else{
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]}
out
}
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
if(percent.match == 0){
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim))]}
else{
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]}
list(out)
}
out<- get.candidate.set(measure, TRUE, 0)
out
out[1]
out[[1]]
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
if(percent.match == 0){
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim))]}
else{
out <- sim.df$file.id[which(sim.df$sim > max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]}
out
}
out<- get.candidate.set(measure, TRUE, 0)
out
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
out <- sim.df$file.id[which(sim.df$sim >= max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]}
out
}
get.candidate.set <- function(measure.database.df, eucl.stand=TRUE, percent.match=1){
if(eucl.stand==TRUE){measure.database.df <- ztransform(measure.database.df)}
else{}
# get the features from the measure
features<-colnames(measure.database.df[,c(-1)])
rows <- measure.database.df$file.id[c(-1)]
database.df <- measure.database.df[c(-1),features]
rownames(database.df) <- rows
colnames(database.df) <- features
measure.df <- measure.database.df[1,features]
rownames(measure.df) <-  measure.database.df[1,1]
sim <- apply(database.df, 1, function(x)exp(-dist(rbind(x, measure.df))/length(features)))
sim.df <- data.frame(sim)
sim.df$file.id <- rownames(sim.df)
out <- sim.df$file.id[which(sim.df$sim >= max(sim.df$sim)-percent.match*max(sim.df$sim)/100)]
out
}
out<- get.candidate.set(measure, TRUE, 0)
out
